theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+
theme(plot.title = element_text(size = 26, face = "bold"), plot.subtitle=element_text(size=24))+
theme(legend.title=element_text(size=24, face = "bold"), legend.text=element_text(size=24))+
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())+
geom_segment(aes(x = 3 , y = 0.963, xend = 5, yend = 0.9602236), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 5 , y = 0.9602236, xend = 7, yend = 0.907), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 7 , y = 0.907, xend = 9, yend = 0.958), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 9 , y = 0.958, xend = 11, yend = 0.953), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 11 , y = 0.953, xend = 13, yend = 0.956), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 13 , y = 0.956, xend = 15, yend = 0.871), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15 , y = 0.871, xend = 15.5, yend = 0.951), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15.5 , y = 0.951, xend = 17, yend = 0.957), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 17 , y = 0.957, xend = 19, yend = 0.9620925), linetype="solid", color = "black", size=2, arrow = arrow(type = "open", angle = 30, length = unit(0.15, "inches")))+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=-Inf, xmax=12.5, alpha=0.1, fill="green4")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=12.5, xmax=13.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=13.5, xmax=15.5, alpha=0.5, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=15.5, xmax=16.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=16.5, xmax=Inf, alpha=0.2, fill="pink4")+
theme(legend.position = "none")
Rich1<- plot_richness(SamplesLC, x="depth_m",color="Sample_ID", measures=c("Simpson"))+
geom_point(size=8)+    coord_flip()+ theme_bw()+
scale_x_reverse(limits = c(21,1))+
scale_color_manual("Depth (m)", labels=c("LC-19m-E1"="19","LC-17m-E1"="17",
"LC-15point5m-E1"="15.5",
"Cadagno15m-E2"="15",
"LC-13m-E1"="13", "LC-11m-E1"="11","LC-9m-E1"="9",
"Cadagno7m-E2"="7", "LC-5m-E1"="5", "LC-3m-E1"="3"),
limits=c("LC-3m-E1", "LC-5m-E1","Cadagno7m-E2","LC-9m-E1", "LC-11m-E1", "LC-13m-E1","Cadagno15m-E2","LC-15point5m-E1" ,"LC-17m-E1","LC-19m-E1"), values=c("#52854C" ,"#C3D7A4", "forestgreen","darkseagreen" , "darkolivegreen3","mediumorchid1","mediumpurple3","mediumpurple1","#CC79A7","peachpuff2","peachpuff4"))+
theme(axis.text=element_text(size=24),axis.title=element_text(size=24,face="bold"))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.position = "bottom")+
theme(strip.background = element_blank(),
strip.text = element_blank())+
ylab("Simpson Diversity Measure")+
labs(title ="Genotypic Alpha Diversity of Bacterial Communities", subtitle = "Simpson Diversity Index with 16s rRNA data (No Control)")+
xlab("Depth (m)")+
theme(legend.position = "right")+
theme(legend.position = "right")+
guides(color = guide_legend(ncol= 6))+
theme(legend.position = c(0.45, 0.85), legend.background = element_rect(size=0.3,
colour ="black"),  legend.direction = "horizontal")+
guides(fill = guide_legend(ncol=2))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+
theme(plot.title = element_text(size = 26, face = "bold"), plot.subtitle=element_text(size=24))+
theme(legend.title=element_text(size=24, face = "bold"), legend.text=element_text(size=24))+
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())+
geom_segment(aes(x = 3 , y = 0.963, xend = 5, yend = 0.9602236), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 5 , y = 0.9602236, xend = 7, yend = 0.907), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 7 , y = 0.907, xend = 9, yend = 0.958), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 9 , y = 0.958, xend = 11, yend = 0.953), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 11 , y = 0.953, xend = 13, yend = 0.956), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 13 , y = 0.956, xend = 15, yend = 0.871), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15 , y = 0.871, xend = 15.5, yend = 0.951), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15.5 , y = 0.951, xend = 17, yend = 0.957), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 17 , y = 0.957, xend = 19, yend = 0.9620925), linetype="solid", color = "black", size=2, arrow = arrow(type = "open", angle = 30, length = unit(0.15, "inches")))+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=-Inf, xmax=12.5, alpha=0.1, fill="green4")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=12.5, xmax=13.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=13.5, xmax=15.5, alpha=0.5, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=15.5, xmax=16.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=16.5, xmax=Inf, alpha=0.2, fill="pink4")+
theme(legend.position = "bottom")
Rich1
Rich1<- plot_richness(SamplesLC, x="depth_m",color="Sample_ID", measures=c("Simpson"))+
geom_point(size=8)+    coord_flip()+ theme_bw()+
scale_x_reverse(limits = c(21,1))+
scale_color_manual("Depth (m)", labels=c("LC-19m-E1"="19","LC-17m-E1"="17",
"LC-15point5m-E1"="15.5",
"Cadagno15m-E2"="15",
"LC-13m-E1"="13", "LC-11m-E1"="11","LC-9m-E1"="9",
"Cadagno7m-E2"="7", "LC-5m-E1"="5", "LC-3m-E1"="3"),
limits=c("LC-3m-E1", "LC-5m-E1","Cadagno7m-E2","LC-9m-E1", "LC-11m-E1", "LC-13m-E1","Cadagno15m-E2","LC-15point5m-E1" ,"LC-17m-E1","LC-19m-E1"), values=c("#52854C" ,"#C3D7A4", "forestgreen","darkseagreen" , "darkolivegreen3","mediumorchid1","mediumpurple3","mediumpurple1","#CC79A7","peachpuff2","peachpuff4"))+
theme(axis.text=element_text(size=24),axis.title=element_text(size=24,face="bold"))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.position = "bottom")+
theme(strip.background = element_blank(),
strip.text = element_blank())+
ylab("Simpson Diversity Measure")+
labs(title ="Genotypic Alpha Diversity of Bacterial Communities", subtitle = "Simpson Diversity Index with 16s rRNA data (No Control)")+
xlab("Depth (m)")+
theme(legend.position = "right")+
theme(legend.position = "right")+
guides(color = guide_legend(ncol= 5))+
theme(legend.position = c(0.45, 0.85), legend.background = element_rect(size=0.3,
colour ="black"),  legend.direction = "horizontal")+
guides(fill = guide_legend(ncol=2))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+
theme(plot.title = element_text(size = 26, face = "bold"), plot.subtitle=element_text(size=24))+
theme(legend.title=element_text(size=24, face = "bold"), legend.text=element_text(size=24))+
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.ticks.y = element_blank())+
geom_segment(aes(x = 3 , y = 0.963, xend = 5, yend = 0.9602236), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 5 , y = 0.9602236, xend = 7, yend = 0.907), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 7 , y = 0.907, xend = 9, yend = 0.958), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 9 , y = 0.958, xend = 11, yend = 0.953), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 11 , y = 0.953, xend = 13, yend = 0.956), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 13 , y = 0.956, xend = 15, yend = 0.871), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15 , y = 0.871, xend = 15.5, yend = 0.951), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 15.5 , y = 0.951, xend = 17, yend = 0.957), linetype="solid", color = "black", size=2)+
geom_segment(aes(x = 17 , y = 0.957, xend = 19, yend = 0.9620925), linetype="solid", color = "black", size=2, arrow = arrow(type = "open", angle = 30, length = unit(0.15, "inches")))+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=-Inf, xmax=12.5, alpha=0.1, fill="green4")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=12.5, xmax=13.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=13.5, xmax=15.5, alpha=0.5, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=15.5, xmax=16.5, alpha=0.2, fill="purple")+
annotate("rect", ymin=-Inf, ymax=Inf, xmin=16.5, xmax=Inf, alpha=0.2, fill="pink4")+
theme(legend.position = "none")
fig6a<- ggarrange(p1p, plot_chemoaAXXX, nrow = 2, heights = c(1,1), align = "v",common.legend = T, legend = "bottom", labels = c('(A)', '(D)'), font.label = list(size = 26))
fig6b<- ggarrange(Rich1, betadiversity, nrow = 2, heights = c(1,1), align = "v", common.legend = T,legend = "bottom", labels = c('(B)', '(E)'), font.label = list(size = 26))
fig6c<- ggarrange(pvlp1,plot_chemoaA,  common.legend = T, legend = "bottom", nrow = 2, heights = c(1,1), align = "v", labels = c('(C)', '(F)'), font.label = list(size = 26))
fig6a<- ggarrange(p1p, plot_chemoaAXXX, nrow = 2, heights = c(1,1), align = "v",common.legend = T, legend = "bottom", labels = c('(A)', '(D)'), font.label = list(size = 26))
fig6b<- ggarrange(Rich1, betadiversity, nrow = 2, heights = c(1,1), align = "v", common.legend = T,legend = "bottom", labels = c('(B)', '(E)'), font.label = list(size = 26))
fig6c<- ggarrange(pvlp1,plot_chemoaA,  common.legend = T, legend = "bottom", nrow = 2, heights = c(1,1), align = "v", labels = c('(C)', '(F)'), font.label = list(size = 26))
figure6
figure6<- ggarrange (fig6a, fig6b, fig6c, ncol=3, align = "v")
figure6
figure6S<- ggarrange(p1p, Rich1, pvlp1,  ncol=3,  widths = c(1.1,0.9,0.9))
figure6S
figure6S2<- ggarrange(plot_chemoaAXXX, betadiversity, plot_chemoaA,  ncol=3)
figure6S2
figure6S2<- ggarrange(plot_chemoaAXXX, betadiversity, plot_chemoaA,  ncol=3, align = 'v)
figure6S2<- ggarrange(plot_chemoaAXXX, betadiversity, plot_chemoaA,  ncol=3, align = "v")
sfcsf
dvdfv
csdhvjgsh
jxhgshjc
@
''
dwkhfdjfc
sdhcjsgchjg
/////////////
figure6S
fdhgfh
fdhj@
library("devtools")
#install_github("CMET-UGent/Phenoflow_package")
library("Phenoflow") # for fingerprinting
library("flowViz") # for plotting
library("ggplot2") # for plotting
library("flowAI")
require('flowFDA')
require("vegan")
require("MESS")
library(stringr)
library(data.table)
library(dplyr)
#source("MRM.parameters.R")
##################Flow-alpha##################
path = "C:/Users/sooch/Downloads/SYBR_files/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE)
gate125
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
library("devtools")
#install_github("CMET-UGent/Phenoflow_package")
library("Phenoflow") # for fingerprinting
library("flowViz") # for plotting
library("ggplot2") # for plotting
library("flowAI")
require('flowFDA')
require("vegan")
require("MESS")
library(stringr)
library(data.table)
library(dplyr)
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
path = "C:/Users/sooch/Downloads/SYBR_files/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
path = "C:/Users/sooch/Downloads/SYBR_files/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
library("devtools")
#install_github("CMET-UGent/Phenoflow_package")
library("Phenoflow") # for fingerprinting
library("flowViz") # for plotting
library("ggplot2") # for plotting
library("flowAI")
require('flowFDA')
require("vegan")
require("MESS")
library(stringr)
library(data.table)
library(dplyr)
#source("MRM.parameters.R")
##################Flow-alpha##################
path = "C:/Users/sooch/Downloads/SYBR_files/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
flowData
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
flowData_transformed
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
path = "C:/Users/sooch/Downloads/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
path = "C:/Users/sooch/Downloads/SYBR_files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
setwd("C:/Users/sooch/Downloads/SYBR_files")
setwd("C:/Users/sooch/Downloads/SYBR_files")
##################Flow-alpha##################
path = "C:/Users/sooch/Downloads/SYBR_files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
setwd("C:/Users/sooch/Downloads/SYBR_files")
##################Flow-alpha##################
path = "C:/Users/sooch/Downloads/SYBR_files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
colnames(metadata2)<- c("Sample_name")
metadata2$Sample_name<-str_replace_all(metadata2$Sample_name, c(" " = "." , "," = "" ))
path = "C:/Users/sooch/Downloads/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
sqrcut1 <- matrix(c(7,15,15,7,6,6,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE)
gate125
sqrcut1
sqrcut1 <- matrix(c(2,10,10,2,2,2,9,8),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(5,17)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE)
gate125
sqrcut1 <- matrix(c(2,10,10,2,2,2,9,8),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,12)),
x=list(limits=c(2,12))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
gate125
sqrcut1 <- matrix(c(2,10,10,2,2,2,9,8),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,12)),
x=list(limits=c(5,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE)
gate125
sqrcut1 <- matrix(c(2,10,10,2,2,2,9,8),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,17)),
x=list(limits=c(2,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE)
gate125
sqrcut1 <- matrix(c(4,15,15,4,4,4,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,17)),
x=list(limits=c(2,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
polyGate1
sqrcut1 <- matrix(c(4,15,15,4,4,4,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,17)),
x=list(limits=c(2,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
gate125
path = "C:/Users/sooch/Downloads/All_Flow_Files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
attributes(flowData)
# Select phenotypic features of interest and transform parameters
flowData_transformed <- transform(flowData,`FL1-H`=asinh(`FL1-H`),
`SSC-H`=asinh(`SSC-H`),
`FL3-H`=asinh(`FL3-H`),
`FSC-H`=asinh(`FSC-H`))
param=c("FL1-H", "FL3-H","SSC-H","FSC-H")
flowData_transformed = flowData_transformed[,param]
### Create a PolygonGate for denoising the dataset
### Define coordinates for gate in sqrcut1 in format: c(x,x,x,x,y,y,y,y)
sqrcut1 <- matrix(c(4,15,15,4,4,4,17,10),ncol=2, nrow=4)
colnames(sqrcut1) <- c("FL1-H","FL3-H")
polyGate1 <- polygonGate(.gate=sqrcut1, filterId = "Total Cells")
###  Gating quality check
gate125<- xyplot(`FL3-H` ~ `FL1-H`, data=flowData_transformed[1], filter=polyGate1,
scales=list(y=list(limits=c(2,17)),
x=list(limits=c(2,17))),
axis = axis.default, nbin=125,
par.strip.text=list(col="white", font=2, cex=2), smooth=FALSE) ##Export image
flowData_transformed <- Subset(flowData_transformed, polyGate1)
### Extract metadata from sample names
metadata2 <- data.frame(do.call(rbind, lapply(strsplit(flowCore::sampleNames(flowData),"_"), rbind)))
gate125
path = "C:/Users/sooch/Downloads/SYBR_files/"
flowData <- read.flowSet(path = path, pattern=".fcs")
